{"ast":null,"code":"var _jsxFileName = \"/home/clemenz/Documents/seminar_presentation/code/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport { Chart } from 'react-google-charts';\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [pollData, setpollData] = useState({\n    amountSOAP: 0,\n    amountREST: 0,\n    amountRPC: 0,\n    amountPollsubmissions: 0\n  });\n  fetch(\"http://localhost:8000/pollSub\").then(response => response.json().then(data => {\n    setpollData(data);\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      width: '500px',\n      height: '300px',\n      chartType: \"BarChart\",\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this),\n      data: [['City', '2010 Population'], ['didUseREST', pollData.amountREST], ['didUseSOAP', pollData.amountSOAP], ['didUseRPC', pollData.amountRPC]],\n      options: {\n        title: 'Which kind of API did you use',\n        chartArea: {\n          width: '50%'\n        },\n        hAxis: {\n          title: 'Total usage',\n          minValue: 0\n        },\n        vAxis: {\n          title: 'APIs'\n        }\n      } // For tests\n      ,\n      rootProps: {\n        'data-testid': '1'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"bBuff3vWQH5xv1/xilp2lG6hoqA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/clemenz/Documents/seminar_presentation/code/frontend/src/App.js"],"names":["Chart","useState","App","pollData","setpollData","amountSOAP","amountREST","amountRPC","amountPollsubmissions","fetch","then","response","json","data","title","chartArea","width","hAxis","minValue","vAxis"],"mappings":";;;;AACA,SAASA,KAAT,QAAsB,qBAAtB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACd,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC;AACtCI,IAAAA,UAAU,EAAE,CAD0B;AAEtCC,IAAAA,UAAU,EAAE,CAF0B;AAGtCC,IAAAA,SAAS,EAAE,CAH2B;AAItCC,IAAAA,qBAAqB,EAAE;AAJe,GAAD,CAAxC;AAOAC,EAAAA,KAAK,CAAC,+BAAD,CAAL,CAAuCC,IAAvC,CAA6CC,QAAD,IAC3CA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAsBG,IAAD,IAAU;AAC9BT,IAAAA,WAAW,CAACS,IAAD,CAAX;AACA,GAFD,CADD;AAMA,sBAAO;AAAA,2BAAK,QAAC,KAAD;AACX,MAAA,KAAK,EAAE,OADI;AAEX,MAAA,MAAM,EAAE,OAFG;AAGX,MAAA,SAAS,EAAC,UAHC;AAIX,MAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJG;AAKX,MAAA,IAAI,EAAE,CACJ,CAAC,MAAD,EAAS,iBAAT,CADI,EAEJ,CAAC,YAAD,EAAeV,QAAQ,CAACG,UAAxB,CAFI,EAGJ,CAAC,YAAD,EAAeH,QAAQ,CAACE,UAAxB,CAHI,EAIJ,CAAC,WAAD,EAAcF,QAAQ,CAACI,SAAvB,CAJI,CALK;AAWX,MAAA,OAAO,EAAE;AACPO,QAAAA,KAAK,EAAE,+BADA;AAEPC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAFJ;AAGPC,QAAAA,KAAK,EAAE;AACLH,UAAAA,KAAK,EAAE,aADF;AAELI,UAAAA,QAAQ,EAAE;AAFL,SAHA;AAOPC,QAAAA,KAAK,EAAE;AACLL,UAAAA,KAAK,EAAE;AADF;AAPA,OAXE,CAsBX;AAtBW;AAuBX,MAAA,SAAS,EAAE;AAAE,uBAAe;AAAjB;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,UAAP;AAyBA;;GAvCQZ,G;;KAAAA,G;AAyCT,eAAeA,GAAf","sourcesContent":["import logo from \"./logo.svg\";\nimport { Chart } from 'react-google-charts'\nimport { useState } from \"react\";\n\nimport \"./App.css\";\n\nfunction App() {\n\tconst [pollData, setpollData] = useState({\n    amountSOAP: 0,\n    amountREST: 0,\n    amountRPC: 0,\n    amountPollsubmissions: 0,\n  });\n\n\tfetch(\"http://localhost:8000/pollSub\").then((response) =>\n\t\tresponse.json().then((data) => {\n\t\t\tsetpollData(data);\n\t\t})\n\t);\n\n\treturn <div><Chart\n  width={'500px'}\n  height={'300px'}\n  chartType=\"BarChart\"\n  loader={<div>Loading Chart</div>}\n  data={[\n    ['City', '2010 Population'],\n    ['didUseREST', pollData.amountREST],\n    ['didUseSOAP', pollData.amountSOAP],\n    ['didUseRPC', pollData.amountRPC],\n  ]}\n  options={{\n    title: 'Which kind of API did you use',\n    chartArea: { width: '50%' },\n    hAxis: {\n      title: 'Total usage',\n      minValue: 0,\n    },\n    vAxis: {\n      title: 'APIs',\n    },\n  }}\n  // For tests\n  rootProps={{ 'data-testid': '1' }}\n/></div>;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}